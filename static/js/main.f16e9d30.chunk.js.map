{"version":3,"sources":["logo.svg","serviceWorker.js","components/pagecomponent.js","containers/pagecontainer.js","posts/SearchComponent.js","posts/PostList.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Pagecomponent","props","state","currentPage","groupCount","startPage","totalPage","createPage","bind","this","setState","pageConfig","pageCallbackFn","pages","push","className","onClick","prePageHandeler","key","i","pageClick","pageLength","nextPageHandeler","getCurrentPage","pageList","Component","JsonTable","require","Pagecontainer","number","dataList","Math","round","data","length","lists","obj","e","console","log","rows","profile","time","search","term","x","title","toLowerCase","includes","PostList","post","searchHandler","event","target","value","type","onChange","border","filter","map","postDetail","userId","id","body","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f16e9d30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react'\nimport './pagecomponent.css'\n\nclass Pagecomponent extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentPage: 1, //当前页码\n            groupCount: 5, //页码分组，显示7个页码，其余用省略号显示\n            startPage: 1,  //分组开始页码\n            totalPage:1 //总页数\n        }\n        this.createPage = this.createPage.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({\n            totalPage: this.props.pageConfig.totalPage\n        })\n        this.props.pageCallbackFn(this.state.currentPage)\n    }\n\n    createPage() {\n        //const {totalPage} = this.props.pageConfig;\n        const {currentPage, groupCount, startPage,totalPage} = this.state;\n        let pages = []\n        //上一页\n        pages.push(<li className={currentPage === 1 ? \"nomore\" : null} onClick={this.prePageHandeler.bind(this)}\n                       key={0}>\n            上一页</li>)\n\n        if (totalPage <= 10) {\n            /*总页码小于等于10时，全部显示出来*/\n            for (let i = 1; i <= totalPage; i++) {\n                pages.push(<li key={i} onClick={this.pageClick.bind(this, i)}\n                               className={currentPage === i ? \"activePage\" : null}>{i}</li>)\n            }\n        } else {\n            /*总页码大于10时，部分显示*/\n\n            //第一页\n            pages.push(<li className={currentPage === 1 ? \"activePage\" : null} key={1}\n                           onClick={this.pageClick.bind(this, 1)}>1</li>)\n\n            let pageLength = 0;\n            if (groupCount + startPage > totalPage) {\n                pageLength = totalPage\n            } else {\n                pageLength = groupCount + startPage;\n            }\n            //前面省略号(当当前页码比分组的页码大时显示省略号)\n            if (currentPage >= groupCount) {\n                pages.push(<li className=\"\" key={-1}>···</li>)\n            }\n            //非第一页和最后一页显示\n            for (let i = startPage; i < pageLength; i++) {\n                if (i <= totalPage - 1 && i > 1) {\n                    pages.push(<li className={currentPage === i ? \"activePage\" : null} key={i}\n                                   onClick={this.pageClick.bind(this, i)}>{i}</li>)\n                }\n            }\n            //后面省略号\n            if (totalPage - startPage >= groupCount + 1) {\n                pages.push(<li className=\"\" key={-2}>···</li>)\n            }\n            //最后一页\n            pages.push(<li className={currentPage === totalPage ? \"activePage\" : null} key={totalPage}\n                           onClick={this.pageClick.bind(this, totalPage)}>{totalPage}</li>)\n        }\n        //下一页\n        pages.push(<li className={currentPage === totalPage ? \"nomore\" : null}\n                       onClick={this.nextPageHandeler.bind(this)}\n                       key={totalPage + 1}>下一页</li>)\n        return pages;\n\n    }\n\n    //页码点击\n    pageClick(currentPage) {\n        const {groupCount} = this.state\n        const getCurrentPage = this.props.pageCallbackFn;\n        //当 当前页码 大于 分组的页码 时，使 当前页 前面 显示 两个页码\n        if (currentPage >= groupCount) {\n            this.setState({\n                startPage: currentPage - 2,\n            })\n        }\n        if (currentPage < groupCount) {\n            this.setState({\n                startPage: 1,\n            })\n        }\n        //第一页时重新设置分组的起始页\n        if (currentPage === 1) {\n            this.setState({\n                startPage: 1,\n            })\n        }\n        this.setState({\n            currentPage\n        })\n        //将当前页码返回父组件\n        getCurrentPage(currentPage)\n    }\n\n    //上一页事件\n    prePageHandeler() {\n        let {currentPage} = this.state\n        if (--currentPage === 0) {\n            return false\n        }\n        this.pageClick(currentPage)\n    }\n\n    //下一页事件\n    nextPageHandeler() {\n        let {currentPage,totalPage} = this.state\n       // const {totalPage} = this.props.pageConfig;\n        if (++currentPage > totalPage) {\n            return false\n        }\n        this.pageClick(currentPage)\n    }\n    render() {\n        const pageList = this.createPage();\n        return (\n            <ul className=\"page-container\">\n                {pageList}\n            </ul>\n        )\n    }\n}\n\nexport default Pagecomponent","/**\n * Created By Shuang On 2019/12/25\n */\nimport React, {Component} from 'react'\nimport Pagecomponent from '../components/pagecomponent'\nimport data from '../file.json'\nimport profile from '../profile.json'\n\nconst JsonTable = require('ts-react-json-table');\n\nclass Pagecontainer extends Component {\n    constructor() {\n        super()\n        this.state = {\n\t\t\tnumber: 1,\n            dataList:[],\n            pageConfig: {\n                totalPage: Math.round(data.length / 100)\n            }\n        }\n        this.getCurrentPage = this.getCurrentPage.bind(this)\n    }\n    getCurrentPage(currentPage) {\n        this.setState({\n\t\t\tnumber: currentPage\n\t\t})\n    }\n    render() {\n        let lists = [];\n        for(let i=100 * (this.state.number - 1);i<100 * (this.state.number);i++){\n\t\t\ttry{\n\t\t\t\tvar obj = data[i]\n\t\t\t\tlists.push(obj)\n\t\t\t}\n\t\t\tcatch(e){\n\t\t\t\tconsole.log('error', e);        \n\t\t\t}\n\t\t}\n        return (\n            <div>\n\t\t\t\t<JsonTable rows = {lists} />\n                <div>\n                    更新日期: {profile[0].time}\n                </div>\n                <Pagecomponent pageConfig={this.state.pageConfig}\n                               pageCallbackFn={this.getCurrentPage}/>\n            </div>\n        )\n    }\n}\nexport default Pagecontainer","import React, { Component } from 'react';\r\n\r\nfunction search(term){\r\n    return function(x){\r\n      return x.title.toLowerCase().includes(term.toLowerCase()) || !term;   //The includes() method determines whether a string contains the characters of a specified string.\r\n   \r\n        \r\n    }\r\n}\r\n\r\nexport default search;","import React, { Component } from 'react';\r\nimport post from '../data/post.json';\r\nimport search from './SearchComponent';\r\n\r\nclass PostList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            post:post,\r\n            term:''\r\n        }\r\n        this.searchHandler = this.searchHandler.bind(this);\r\n    }\r\n\r\n    searchHandler(event){\r\n        this.setState({term : event.target.value})  //outputs watever the input is inputted\r\n    }\r\n\r\n    render() {\r\n        const{term, post} = this.state;  //destructuring\r\n        return(\r\n            <div>\r\n                <form>\r\n                    <input type = \"text\" onChange = {this.searchHandler} value = {term}/>\r\n                </form>\r\n                <h1>Hello, here is the JSON Data</h1>\r\n                <div>\r\n                               <table border =\"1\">\r\n                                   <tr>\r\n                                       <th>userId</th>\r\n                                       <th>id</th>\r\n                                       <th>Title</th>\r\n                                       <th>Body</th>\r\n                                   </tr>\r\n\r\n                {/* {this.state.post.filter(search(this.state.term)).map((postDetail) =>{ */}\r\n                {post.filter(search(this.state.term)).map((postDetail) =>{\r\n                    return(\r\n                        \r\n                           <tr>\r\n                               <td>{postDetail.userId}</td>\r\n                               <td>{postDetail.id}</td>\r\n                               <td>{postDetail.title}</td>\r\n                               <td>{postDetail.body}</td>\r\n                           </tr>\r\n                              \r\n                            \r\n                    )\r\n                })}\r\n                 </table>\r\n                               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostList;\r\n\r\n","import React, {Component} from 'react';\nimport PostList from './posts/PostList';\nimport logo from './logo.svg';\nimport './App.css';\nimport search from './posts/SearchComponent';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      {/* <form>\n        <input type = \"text\"/>\n      </form> */}\n      <PostList/>\n    </div>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './containers/pagecontainer';\nimport App from './App';\n// import StockList from './StockList/StockList';\n\n\nconst JsonTable = require('ts-react-json-table');\n// var items = [\n// \t{\"id\": 75950,\"name\": \"Louella Wallace\",\"age\": 24,\"phone\": \"+44 (0)203 437 7302\",\"color\": \"green\"},\n// \t{\"id\": 80616,\"name\": \"Hanson Perry\",\"age\": 36,\"phone\": \"+44 (0)203 279 3708\",\"color\": \"brown\"},\n// \t{\"id\": 77621,\"name\": \"Brandi Long\",\"age\": 20,\"phone\": \"+44 (0)203 319 4880\",\"color\": \"gray\"},\n// \t{\"id\": 81299,\"name\": \"Tonia Sykes\",\"age\": 38,\"phone\": \"+44 (0)208 328 3671\",\"color\": \"blue\"},\n// \t{\"id\": 14225,\"name\": \"Leach Durham\",\"age\": 23,\"phone\": \"+44 (0)208 280 9572\",\"color\": \"green\"}\n//   ];\n  \nlet admins = require('./file.json');\n// console.log(admins);\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<StockList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}